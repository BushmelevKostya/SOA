openapi: 3.0.3
info:
  title: City Collection Management API
  description: RESTful API для управления коллекцией объектов City с поддержкой XML формата
  version: 1.0.0

servers:
  - url: http://localhost:8080/api
    description: Development server

tags:
  - name: cities
    description: Базовые операции с коллекцией городов
  - name: utils
    description: Специальные операции с коллекцией

paths:
  /cities:
    get:
      tags:
        - cities
      summary: Получить список городов или создать новый город
      description: |
        Если передан параметр `action=create`, выполняется создание нового города.
        Иначе выполняется поиск и фильтрация списка городов с поддержкой пагинации, сортировки и фильтрации.
        Все параметры передаются в URL запроса.
      parameters:
        - in: query
          name: action
          schema:
            type: string
            enum: [create]
          description: Флаг для создания нового города

        # Параметры для создания города
        - in: query
          name: name
          schema:
            type: string
          description: Название города (обязательно при создании)
        - in: query
          name: coordinates.x
          schema:
            type: number
            format: double
            minimum: -190
            exclusiveMinimum: true
          description: Координата X (> -190, обязательно при создании)
        - in: query
          name: coordinates.y
          schema:
            type: number
            format: double
          description: Координата Y (обязательно при создании)
        - in: query
          name: area
          schema:
            type: integer
            minimum: 1
          description: Площадь города (> 0, обязательно при создании)
        - in: query
          name: population
          schema:
            type: integer
            minimum: 1
          description: Население города (> 0, обязательно при создании)
        - in: query
          name: metersAboveSeaLevel
          schema:
            type: number
            format: double
          description: Высота над уровнем моря
        - in: query
          name: carCode
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 1000
          description: Код автомобиля (1-1000, обязательно при создании)
        - in: query
          name: climate
          schema:
            type: string
            enum: [OCEANIC, STEPPE, SUBARCTIC, DESERT]
          description: Климат (обязательно при создании)
        - in: query
          name: standardOfLiving
          schema:
            type: string
            enum: [ULTRA_HIGH, MEDIUM, VERY_LOW]
          description: Уровень жизни
        - in: query
          name: governor.name
          schema:
            type: string
          description: Имя губернатора (обязательно при создании)
        - in: query
          name: governor.age
          schema:
            type: integer
            format: int64
            minimum: 1
          description: Возраст губернатора (> 0)
        - in: query
          name: governor.height
          schema:
            type: number
            format: double
            minimum: 0
            exclusiveMinimum: true
          description: Рост губернатора (> 0)
        - in: query
          name: governor.birthday
          schema:
            type: string
            format: date
          description: День рождения губернатора

        # Параметры для пагинации и сортировки
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Номер страницы
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Размер страницы
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [id, name, area, population, metersAboveSeaLevel, carCode, creationDate]
          description: Поле для сортировки
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Порядок сортировки

        # Параметры для фильтрации
        - in: query
          name: name
          schema:
            type: string
          description: Фильтр по названию города
        - in: query
          name: area[gt]
          schema:
            type: integer
          description: Фильтр по площади (больше указанного значения)
        - in: query
          name: area[lt]
          schema:
            type: integer
          description: Фильтр по площади (меньше указанного значения)
        - in: query
          name: population[gt]
          schema:
            type: integer
          description: Фильтр по населению (больше указанного значения)
        - in: query
          name: population[lt]
          schema:
            type: integer
          description: Фильтр по населению (меньше указанного значения)
        - in: query
          name: carCode
          schema:
            type: integer
          description: Фильтр по коду автомобиля
        - in: query
          name: climate
          schema:
            type: string
            enum: [OCEANIC, STEPPE, SUBARCTIC, DESERT]
          description: Фильтр по климату
        - in: query
          name: standardOfLiving
          schema:
            type: string
            enum: [ULTRA_HIGH, MEDIUM, VERY_LOW]
          description: Фильтр по уровню жизни

      responses:
        '200':
          description: Успешный ответ со списком городов
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CityArray'
        '201':
          description: Город успешно создан
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/City'
        '400':
          description: Ошибка валидации данных
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

  /cities/{id}:
    get:
      tags:
        - cities
      summary: Получить город по идентификатору
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          description: ID города
      responses:
        '200':
          description: Успешный ответ
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/City'
        '404':
          description: Город не найден
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Неверный ID
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - cities
      summary: Обновить город по идентификатору
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          description: ID обновляемого города
        - in: query
          name: name
          schema:
            type: string
          description: Новое название города
        - in: query
          name: coordinates.x
          schema:
            type: number
            format: double
            minimum: -190
            exclusiveMinimum: true
          description: Новая координата X
        - in: query
          name: coordinates.y
          schema:
            type: number
            format: double
          description: Новая координата Y
        - in: query
          name: area
          schema:
            type: integer
            minimum: 1
          description: Новая площадь
        - in: query
          name: population
          schema:
            type: integer
            minimum: 1
          description: Новое население
        - in: query
          name: metersAboveSeaLevel
          schema:
            type: number
            format: double
          description: Новая высота над уровнем моря
        - in: query
          name: carCode
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 1000
          description: Новый код автомобиля
        - in: query
          name: climate
          schema:
            type: string
            enum: [OCEANIC, STEPPE, SUBARCTIC, DESERT]
          description: Новый климат
        - in: query
          name: standardOfLiving
          schema:
            type: string
            enum: [ULTRA_HIGH, MEDIUM, VERY_LOW]
          description: Новый уровень жизни
        - in: query
          name: governor.name
          schema:
            type: string
          description: Новое имя губернатора
        - in: query
          name: governor.age
          schema:
            type: integer
            format: int64
            minimum: 1
          description: Новый возраст губернатора
        - in: query
          name: governor.height
          schema:
            type: number
            format: double
            minimum: 0
            exclusiveMinimum: true
          description: Новый рост губернатора
        - in: query
          name: governor.birthday
          schema:
            type: string
            format: date
          description: Новый день рождения губернатора
      responses:
        '200':
          description: Город успешно обновлен
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/City'
        '400':
          description: Ошибка валидации данных
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Город не найден
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - cities
      summary: Удалить город по идентификатору
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          description: ID удаляемого города
      responses:
        '204':
          description: Город успешно удален
        '404':
          description: Город не найден
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Неверный ID
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

  /cities/utils/delete-by-sea-level:
    delete:
      tags:
        - utils
      summary: Удалить города по высоте над уровнем моря
      parameters:
        - in: query
          name: metersAboveSeaLevel
          required: true
          schema:
            type: number
            format: double
          description: Значение высоты над уровнем моря для удаления
      responses:
        '200':
          description: Успешное выполнение операции
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: DeleteResult
                properties:
                  deletedCount:
                    type: integer
                    description: Количество удаленных городов
        '400':
          description: Неверный параметр
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

  /cities/utils/average-car-code:
    get:
      tags:
        - utils
      summary: Получить среднее значение кода автомобиля
      responses:
        '200':
          description: Успешное выполнение операции
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: AverageResult
                properties:
                  average:
                    type: number
                    format: double
                    description: Среднее значение поля carCode
        '404':
          description: Коллекция пуста
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

  /cities/utils/min-name:
    get:
      tags:
        - utils
      summary: Получить город с минимальным названием
      responses:
        '200':
          description: Успешное выполнение операции
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/City'
        '404':
          description: Коллекция пуста
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    CityArray:
      type: array
      xml:
        name: Cities
        wrapped: true
      items:
        $ref: '#/components/schemas/City'

    City:
      type: object
      xml:
        name: City
      required:
        - id
        - name
        - coordinates
        - creationDate
        - area
        - population
        - carCode
        - climate
        - governor
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          minimum: 1
          description: Уникальный идентификатор (генерируется автоматически)
        name:
          type: string
          minLength: 1
          description: Название города
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: date-time
          readOnly: true
          description: Дата создания (генерируется автоматически)
        area:
          type: integer
          minimum: 1
          description: Площадь города (> 0)
        population:
          type: integer
          minimum: 1
          description: Население города (> 0)
        metersAboveSeaLevel:
          type: number
          format: double
          nullable: true
          description: Высота над уровнем моря
        carCode:
          type: integer
          format: int64
          minimum: 1
          maximum: 1000
          description: Код автомобиля (1-1000)
        climate:
          type: string
          enum: [OCEANIC, STEPPE, SUBARCTIC, DESERT]
          description: Климат
        standardOfLiving:
          type: string
          enum: [ULTRA_HIGH, MEDIUM, VERY_LOW]
          nullable: true
          description: Уровень жизни
        governor:
          $ref: '#/components/schemas/Human'

    Coordinates:
      type: object
      xml:
        name: Coordinates
      required:
        - x
        - y
      properties:
        x:
          type: number
          format: double
          minimum: -190
          exclusiveMinimum: true
          description: Координата X (> -190)
        y:
          type: number
          format: double
          description: Координата Y

    Human:
      type: object
      xml:
        name: Human
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          description: Имя губернатора
        age:
          type: integer
          format: int64
          minimum: 1
          nullable: true
          description: Возраст губернатора (> 0)
        height:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
          nullable: true
          description: Рост губернатора (> 0)
        birthday:
          type: string
          format: date
          nullable: true
          description: День рождения губернатора

    Error:
      type: object
      xml:
        name: Error
      properties:
        code:
          type: integer
          format: int32
          description: Код ошибки
        message:
          type: string
          description: Сообщение об ошибке
        timestamp:
          type: string
          format: date-time
          description: Время возникновения ошибки